q()
install.packages('shiny')
bets_per_user = sqlQuery(handle,paste("select * from memberid_gametypeid", sep=''))
bets_per_user = sqlQuery(handle,paste("select * from memberid_gametypeid", sep=''))
library(RODBC)
handle = odbcDriverConnect('driver=SQL Server;server=DESKTOP-UVDOJ3H\\MSSQLSERVER16;')
bets_per_user = sqlQuery(handle,paste("select * from memberid_gametypeid", sep=''))
bets_per_user
bets_per_user = sqlQuery(handle,paste("select * from casinocash.dbo.memberid_gametypeid", sep=''))
bets_per_user
colnames(bets_per_user)
matrix([0,7])
matrix(dim=[0,7])
characteristics =data.frame(matrix(nrow=0;ncol=7))
characteristics =data.frame(matrix(nrow=0,ncol=7))
matrix(dim=[0,7])
charactersistics
characteristics
characteristics =data.frame(matrix(nrow=0,ncol=7))
colnames(characteristics) = c("biggest_bet","best_return","avg_return","worst_return","total_bets", "total_bet","total_return")
characteristics
library(shiny)
multiSliders = function(n, ...){
sliders = lapply(1:n, function(i){
sliderInput(paste0('slider-', i),  paste('Slider', i), ...)
})
paste_all = function(...) paste(..., collapse = '\n')
HTML(do.call('paste_all', sliders))
}
runApp(list(
ui = pageWithSidebar(
headerPanel('Multiple Sliders'),
sidebarPanel(
sliderInput('slider-0', 'Slider0', 0, 10, 4),
multiSliders(2, 0, 10, 4)
),
mainPanel()
),
server = function(input, output){
}
))
library(RODBC)
handle = odbcDriverConnect('driver=SQL Server;server=DESKTOP-UVDOJ3H\\MSSQLSERVER16;')
bets_per_user = sqlQuery(handle,paste("select * from casinocash.dbo.memberid_gametypeid", sep=''))
characteristics =data.frame(matrix(nrow=0,ncol=7))
colnames(characteristics) = c("biggest_bet","best_return","avg_return","worst_return","total_bets", "total_bet","total_return")
library(shiny)
multiSliders = function(n, ...){
sliders = lapply(1:n, function(i){
sliderInput(paste0('slider-', i),  paste('Slider', i), ...)
})
paste_all = function(...) paste(..., collapse = '\n')
HTML(do.call('paste_all', sliders))
}
runApp(list(
ui = pageWithSidebar(
headerPanel('Multiple Sliders'),
sidebarPanel(
sliderInput('slider-0', 'Slider0', 0, 10, 4),
multiSliders(5, 0, 10, 4)
),
mainPanel()
),
server = function(input, output){
}
))
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
head(bets_per_user)
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
?renderDataTable
runApp('D:/FraudSystem/BetUsers/Betuser')
handle = odbcDriverConnect('driver=SQL Server;server=DESKTOP-UVDOJ3H\\MSSQLSERVER16;')
bets_per_user = sqlQuery(handle,paste("select * from casinocash.dbo.memberid_gametypeid", sep=''))
bets_per_user
outputtable = reactive({subset(bets_per_user,biggest_bet > input$mBet & avg_return > input$aReturn)})
outputtable
colnames(bets_per_user)
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp()
runApp('D:/FraudSystem/BetUsers/Betuser')
head(bets_per_user)
quant(head(bets_per_user))
quantile(head(bets_per_user),c(1:100)/100)
quantile(bets_per_user$biggest_bet,c(1:100)/100)
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
?sliderInput
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
?sidebarLayout
runApp('D:/FraudSystem/BetUsers/Betuser')
?sliderInput
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
?sliderInput
runApp('D:/FraudSystem/BetUsers/Betuser')
bets_per_user$id
bets_per_user$biggest_bet
quantile(bets_per_user$biggest_bet)
quantile(bets_per_user$biggest_bet,c(1:1000)/1000)
plot(quantile(bets_per_user$biggest_bet,c(1:1000)/1000))
qplot(bets_per_user$biggest_bet)
qqnorm(bets_per_user$biggest_bet)
qqnorm(log(bets_per_user$biggest_bet))
qqnorm(log(bets_per_user$biggest_bet),ylim=c(-1,10))
library(fit\)
library(fitdistrplus)
library(evir)
fitdist(bets_per_user$biggest_bet)
fitdist(bets_per_user$biggest_bet,'gpd')
fitdist(bets_per_user$biggest_bet,'gpd', )
?gpd
?rgpd
fitdist(bets_per_user$biggest_bet,'gpd',xi = 1, mu =1, beta=2 )
fitdist(bets_per_user$biggest_bet,'gpd', xi = 0, mu =1, beta=2 )
fitdist(bets_per_user$biggest_bet,'gpd',start=list(xi = 0, mu =1, beta=2) )
fitdist(bets_per_user$biggest_bet,'gpd',start=list(xi = 0, mu =1, beta=2) , method="mge", gof='AD2R')
fitdist(bets_per_user$biggest_bet,'gpd',start=list(xi = -1, mu =1, beta=2) , method="mge", gof='AD2R')
fitdist(bets_per_user$biggest_bet,'gpd',start=list(xi = 5, mu =1, beta=2) , method="mge", gof='AD2R')
fitdist(bets_per_user$biggest_bet,'gpd',start=list(xi = 5, mu =0, beta=2) , method="mge", gof='AD2R')
plot(fitdist(bets_per_user$biggest_bet,'gpd',start=list(xi = 5, mu =0, beta=2) , method="mge", gof='AD2R'))
xm = fitdist(bets_per_user$biggest_bet,'gpd',start=list(xi = 5, mu =0, beta=2) , method="mge", gof='AD2R')
gofstat(xm)
xm = fitdist(bets_per_user$biggest_bet,'gpd',start=list(xi = 5, mu =0, beta=2) , method="mge", gof='AD')
xm = fitdist(bets_per_user$biggest_bet,'gpd',start=list(xi = 5, mu =0, beta=2) , method="mge", gof='KS')
gofstat(xm)
plot(fitdist(bets_per_user$biggest_bet,'gpd',start=list(xi = 5, mu =0, beta=2) , method="mge", gof='AD2R'))
plot(fitdist(bets_per_user$avg_return,'gpd',start=list(xi = 5, mu =0, beta=2) , method="mge", gof='AD2R'))
plot(fitdist(bets_per_user$total_bets,'gpd',start=list(xi = 5, mu =0, beta=2) , method="mge", gof='AD2R'))
xm = fitdist(bets_per_user$total_bets,'gpd',start=list(xi = 5, mu =0, beta=2) , method="mge", gof='AD2R')
xm
plot(xm)
gofstat(xm)
xm = fitdist(bets_per_user$total_bets,'weibull',start=list(xi = 5, mu =0, beta=2) , method="mge", gof='AD2R')
install.packages("Renext")
library("Renext")
weibplot(bets_per_user$total_bets)
expplot(bets_per_user$total_bets)
install.packages('poweRlaw')
library('poweRlaw')
estimate_xmin(bets_per_user$total_bet)
estimate_xmin(bets_per_user$total_bets)
bets_per_user$id
estimate_xmin(bets_per_user$total_bets)
bets_per_user$total_bets
estimate_pars(bets_per_user[,'total_bets'])
data_pl = displ$new(bets_per_user$total_bets)
estimate_xmin(bets_per_user$total_bets)
estimate_xmin(data_pl)
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
cooccurrenceset = sqlQuery(handle,
"select xjj.memberid,xjj.gametypeid,
xjj.total_bet / xjj.total_bets overall_abet, z.total_bet / z.total_bets COOCCURRENCE_abet,
xjj.avg_return OVERALL_aReturn,  z.avg_return COOCCURRENCE_aReturn, xjj.total_bets, z.total_bets
from casinocash.dbo.memberid_gametypeid xjj join
(
select m1 memberid, gametypeid, max(m1betamount) biggest_bet,
max(convert(float,m1payoff) / convert(float,case when m1betamount = 0 then 1 else m1betamount end)) best_return,
avg(convert(float,m1payoff) / convert(float,case when m1betamount = 0 then 1 else m1betamount end)) avg_return,
min(convert(float,m1payoff) / convert(float,case when m1betamount = 0 then 1 else m1betamount end )) worst_return,
count(*) total_bets, suM(m1betamount) total_bet, sum(m1payoff) total_return from
(
select m1,gametypeid, m1betamount,m1payoff from CasinoCash.dbo.co_occurrences_betcontrastor
union all
select m2, gametypeid, m2betamount,m2payoff from CasinoCash.dbo.co_occurrences_betcontrastor
) x group by m1, gametypeid
) z on z.memberid = xjj.memberid and z.gametypeid = xjj.gametypeid
order by z.total_bets desc
"
)
cooccurrenceset
colnames(cooccurrenceset)
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
library(evir)
gpd
?rgpd
bets_per_tot_dist = fitdist(bets_per_user$total_bets,'gpd',start=list(xi = 5, mu =0, beta=2) , method="mge", gof='AD2R')
?rgpd
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
install.packages('shinybootstrap3')
bs3appObj()
runApp('D:/FraudSystem/BetUsers/Betuser')
runApp('D:/FraudSystem/BetUsers/Betuser')
create_forked_task <- function(expr) {
makeReactiveBinding("state")
state <- factor("running",
levels = c("running", "success", "error", "cancel"),
ordered = TRUE
)
result <- NULL
# Launch the task in a forked process. This always returns
# immediately, and we get back a handle we can use to monitor
# or kill the job.
task_handle <- parallel::mcparallel({
force(expr)
})
# Poll every 100 milliseconds until the job completes
o <- observe({
res <- parallel::mccollect(task_handle, wait = FALSE)
if (is.null(res)) {
invalidateLater(100)
} else {
o$destroy()
if (!is.list(res) || length(res) != 1 || !inherits(res[[1]], "try-error")) {
state <<- "success"
result <<- res[[1]]
} else {
state <<- "error"
result <<- attr(res[[1]], "condition", exact = TRUE)
}
}
})
list(
completed = function() {
state != "running"
},
result = function() {
if (state == "running") {
# If running, abort the current context silently.
# We've taken a reactive dependency on "state" so if
# the state changes the context will invalidate.
req(FALSE)
} else if (state == "success") {
return(result)
} else if (state == "error") {
stop(result)
} else if (state == "cancel") {
validate(need(FALSE, "The operation was cancelled"))
}
},
cancel = function() {
if (state == "running") {
state <<- "cancel"
o$destroy()
tools::pskill(task_handle$pid, tools::SIGTERM)
tools::pskill(-task_handle$pid, tools::SIGTERM)
parallel::mccollect(task_handle, wait = FALSE)
}
}
)
}
task <<- create_forked_task({
# Pretend this takes a long time
Sys.sleep(5)
cars[sample(nrow(cars), 10),]
})
install.packages('parallel')
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
install.packages(tools)
library(parallel)
?parallel
install.packages('snow')
library(snow)
snow
cl-> makeCluster(2,type='MPI')
cl <- makeCluster(2,type='MPI')
install.packages('RMPI')
install.packages('RMmpi')
install.packages('Rmpi')
cl <- makeCluster(2,type='MPI')
cl <- makeCluster(2,type='MPI')
Sys.locale()
x=c('中華民族');x; y <- data.frame(x, stringsAsFactors=FALSE)
x=c('中華民族');x; y <- data.frame(x, stringsAsFactors=FALSE)
library(RODBC)
handle = odbcDriverConnect('driver=SQL Server;server=DESKTOP-UVDOJ3H\\MSSQLSERVER16;',DBMSencoding="UTF-8")
cooccurrenceset = sqlQuery（handle, "select * from [casinocash].[dbo].[GameType] gt join
[casinocash].[dbo].[GameHallInfo] ghi on gt.GameSupplierType = ghi.GameSupplier
join [casinocash].[dbo].[GameHallCategory] gc on gc.gamehallid = ghi.GameSupplier")
print(cooccurrenceset)
library(RODBC)
handle = odbcDriverConnect('driver=SQL Server;server=DESKTOP-UVDOJ3H\\MSSQLSERVER16;',DBMSencoding="Chinese_Taiwan_Stroke_CI_AS")
cooccurrenceset = sqlQuery（handle, "select * from [casinocash].[dbo].[GameType] gt join
[casinocash].[dbo].[GameHallInfo] ghi on gt.GameSupplierType = ghi.GameSupplier
join [casinocash].[dbo].[GameHallCategory] gc on gc.gamehallid = ghi.GameSupplier")
print(cooccurrenceset)
library(RODBC)
handle = odbcDriverConnect('driver=SQL Server;server=DESKTOP-UVDOJ3H\\MSSQLSERVER16;',DBMSencoding="Chinese_Taiwan_Stroke")
cooccurrenceset = sqlQuery（handle, "select * from [casinocash].[dbo].[GameType] gt join
[casinocash].[dbo].[GameHallInfo] ghi on gt.GameSupplierType = ghi.GameSupplier
join [casinocash].[dbo].[GameHallCategory] gc on gc.gamehallid = ghi.GameSupplier")
print(cooccurrenceset)
library(RODBC)
handle = odbcDriverConnect('driver=SQL Server;server=DESKTOP-UVDOJ3H\\MSSQLSERVER16;',DBMSencoding="cp950")
cooccurrenceset = sqlQuery（handle, "select * from [casinocash].[dbo].[GameType] gt join
[casinocash].[dbo].[GameHallInfo] ghi on gt.GameSupplierType = ghi.GameSupplier
join [casinocash].[dbo].[GameHallCategory] gc on gc.gamehallid = ghi.GameSupplier")
print(cooccurrenceset)
Sys.getlocale()
LC_COLLATE = Chinese_Taiwan_Stroke_CI_AS
LC_COLLATE ='Chinese_Taiwan_Stroke_CI_AS'
Sys.getlocale()
Sys.setlocale("LC_ALL","Chinese_Taiwan")
Sys.setlocale("LC_ALL","Chinese_Taiwan_Stroke")
Sys.setlocale("LC_ALL","Chinese_Taiwan")
Sys.getlocale()
library(RODBC)
handle = odbcDriverConnect('driver=SQL Server;server=DESKTOP-UVDOJ3H\\MSSQLSERVER16;',DBMSencoding="cp950")
cooccurrenceset = sqlQuery（handle, "select * from [casinocash].[dbo].[GameType] gt join
[casinocash].[dbo].[GameHallInfo] ghi on gt.GameSupplierType = ghi.GameSupplier
join [casinocash].[dbo].[GameHallCategory] gc on gc.gamehallid = ghi.GameSupplier")
print(cooccurrenceset)
library(RODBC)
handle = odbcDriverConnect('driver=SQL Server;server=DESKTOP-UVDOJ3H\\MSSQLSERVER16;',DBMSencoding="Chinese_Taiwan_Stroke_CI_AS")
cooccurrenceset = sqlQuery（handle, "select * from [casinocash].[dbo].[GameType] gt join
[casinocash].[dbo].[GameHallInfo] ghi on gt.GameSupplierType = ghi.GameSupplier
join [casinocash].[dbo].[GameHallCategory] gc on gc.gamehallid = ghi.GameSupplier")
print(cooccurrenceset)
library(RODBC)
handle = odbcDriverConnect('driver=SQL Server;server=DESKTOP-UVDOJ3H\\MSSQLSERVER16;',
DBMSencoding="Chinese_Taiwan_Stroke")
cooccurrenceset = sqlQuery（handle, "select * from [casinocash].[dbo].[GameType] gt join
[casinocash].[dbo].[GameHallInfo] ghi on gt.GameSupplierType = ghi.GameSupplier
join [casinocash].[dbo].[GameHallCategory] gc on gc.gamehallid = ghi.GameSupplier")
print(cooccurrenceset)
Sys.setlocale("LC_ALL","English")
Sys.setlocale("LC_ALL","Chinese_Taiwan")
Sys.setlocale("LC_ALL","Chinese (Traditional)_Taiwan")
library(RODBC)
handle = odbcDriverConnect('driver=SQL Server;server=DESKTOP-UVDOJ3H\\MSSQLSERVER16;',
DBMSencoding="Chinese_Taiwan_Stroke")
cooccurrenceset = sqlQuery（handle, "select * from [casinocash].[dbo].[GameType] gt join
[casinocash].[dbo].[GameHallInfo] ghi on gt.GameSupplierType = ghi.GameSupplier
join [casinocash].[dbo].[GameHallCategory] gc on gc.gamehallid = ghi.GameSupplier")
print(cooccurrenceset)
handle = odbcDriverConnect('driver=SQL Server;server=DESKTOP-UVDOJ3H\\MSSQLSERVER16;',
DBMSencoding="Chinese_Taiwan_Stroke")
cooccurrenceset = sqlQuery（handle, "select * from [casinocash].[dbo].[GameType] gt join
[casinocash].[dbo].[GameHallInfo] ghi on gt.GameSupplierType = ghi.GameSupplier
join [casinocash].[dbo].[GameHallCategory] gc on gc.gamehallid = ghi.GameSupplier")
print(cooccurrenceset)
cooccurrenceset = sqlQuery（handle, "select * from [casinocash].[dbo].[GameType] gt join
[casinocash].[dbo].[gamehallinfo] ghi on gt.GameSupplierType = ghi.GameSupplier
join [casinocash].[dbo].[GameHallCategory] gc on gc.gamehallid = ghi.GameSupplier")
cooccurrenceset = sqlQuery( handle, "select * from [dbo].[GameType] gt join [dbo].[GameHallInfo] ghi
on gt.GameSupplierType = ghi.GameSupplier join dbo.GameHallCategory gc on gc.gamehallid = ghi.GameSupplier
")
Sys.setlocale("LC_ALL","Chinese (Traditional)_Taiwan_Stroke")
Sys.setlocale("LC_ALL","Chinese (Traditional)_Taiwan.Stroke")
data <- c("物品","方案")
data
print("中文")
Sys.getlocale()
library(RODBC)
handle = odbcDriverConnect('driver=SQL Server;server=DESKTOP-UVDOJ3H\\MSSQLSERVER16;',
DBMSencoding="Chinese_Taiwan_Stroke_CI_AS")
cooccurrenceset = sqlQuery( handle, "select * from [dbo].[GameType] gt join [dbo].[GameHallInfo] ghi
on gt.GameSupplierType = ghi.GameSupplier join dbo.GameHallCategory gc on gc.gamehallid = ghi.GameSupplier
")
print(cooccurrenceset)
iconv
iconvlist
iconvlist()
library(RODBC)
handle = odbcDriverConnect('driver=SQL Server;server=DESKTOP-UVDOJ3H\\MSSQLSERVER16;',
DBMSencoding="Chinese_Taiwan_Stroke_CI_AS")
cooccurrenceset = sqlQuery( handle, "select * from [dbo].[GameType] gt join [dbo].[GameHallInfo] ghi
on gt.GameSupplierType = ghi.GameSupplier join dbo.GameHallCategory gc on gc.gamehallid = ghi.GameSupplier
")
print(cooccurrenceset)
iconvlist()
exit
restart
shiny::runApp('D:/FraudSystem/BetUsers/RiskPrediction')
runApp('D:/FraudSystem/BetUsers/RiskPrediction')
runApp('D:/FraudSystem/BetUsers/RiskPrediction')
runApp('D:/FraudSystem/BetUsers/RiskPrediction')
runApp('D:/FraudSystem/BetUsers/RiskPrediction')
runApp('D:/FraudSystem/BetUsers/RiskPrediction')
runApp('D:/FraudSystem/BetUsers/RiskPrediction')
runApp('D:/FraudSystem/BetUsers/RiskPrediction')
runApp('D:/FraudSystem/BetUsers/RiskPrediction')
runApp('D:/FraudSystem/BetUsers/RiskPrediction')
runApp('D:/FraudSystem/BetUsers/RiskPrediction')
runApp('D:/FraudSystem/BetUsers/RiskPrediction')
runApp('D:/FraudSystem/BetUsers/RiskPrediction')
runApp('D:/FraudSystem/BetUsers/RiskPrediction')
runApp('D:/FraudSystem/BetUsers/RiskPrediction')
runApp('D:/FraudSystem/BetUsers/RiskPrediction')
handle = odbcDriverConnect('driver=SQL Server;server=DESKTOP-UVDOJ3H\\MSSQLSERVER16;')
selections = sqlQuery(handle,paste("select sum(total_bets) nbets, sum(total_bet) betamount , sum(total_return) tot_return , gametypeid  , [name], gamesuppliertype,
convert(float, sum(total_bet)) / convert(float,sum(total_bets)) avg_bet,
convert(float, sum(total_return)) / convert(float, case when sum(total_bet) =0 then 1 else sum(total_bet) end ) roi, wsite
from casinocash.dbo.memberid_gametypeid gt join
casinocash.dbo.gametype tg on tg.id = gt.gametypeid
group by gametypeid, [name],gamesuppliertype, wsite
having sum(total_bets) > 10000
order by tot_return desc
", sep=''), stringsAsFactors = FALSE)
bets_per_user = sqlQuery(handle,paste("select memberid,gametypeid,convert(float,sum(total_bet)) / convert(float,sum(total_bets)) avg_bet,
convert(float,sum(total_return)) / convert(float, case when sum(total_bet) =0 then 1 else sum(total_bet) end ) roi,
sum(total_bets) nbets, sum(total_bet) BetAmount, sum(total_return) payoff, wsite
from casinocash.dbo.memberid_gametypeid group by memberid, gametypeid, wsite", sep=''))
print(bets_per_user)
runApp('D:/FraudSystem/BetUsers/RiskPrediction')
runApp('D:/FraudSystem/BetUsers/RiskPrediction')
runApp('D:/FraudSystem/BetUsers/RiskPrediction')
runApp('D:/FraudSystem/BetUsers/RiskPrediction')
runApp('D:/FraudSystem/BetUsers/RiskPrediction')
model = data.frame(
c(42,0.03782678,0.04443107/ sqrt(10000), 1.330926,-4.0753316,76.989813,1.948232,-3.618804,83.685136)
)
model
model = data.frame(
cbind(42,0.03782678,0.04443107/ sqrt(10000), 1.330926,-4.0753316,76.989813,1.948232,-3.618804,83.685136)
)
cbind
model
colnames(model) = c('gametypeid','nmean','nvar','ct_xi','ct_mu','ct_beta','amt_xi','amt_mu','amt_beta')
model
runApp('D:/FraudSystem/BetUsers/RiskPrediction')
bets_per_user
bets_per_user\
bets_per_user
shiny::runApp('D:/FraudSystem/BetUsers/BetDistAnalysis')
runApp('D:/FraudSystem/BetUsers/BetDistAnalysis')
runApp('D:/FraudSystem/BetUsers/BetDistAnalysis')
